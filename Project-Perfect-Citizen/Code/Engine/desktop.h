//desktop.h


#pragma once

#include <vector>
#include <SFML/Graphics/Drawable.hpp>
#include "../Game/Inbox.h"
#include "NodeState.h"
#include "BaseFileType.h"


namespace sf {
    class Event;
    class Sprite;
    class Time;
	class Image;
};


namespace ppc {

	class WindowInterface;
	class InputHandler;
	class Inbox;
	class World;
	class Network;
	class Transition;


///////////////////////////////////////////////////////////////////////
///@brief Manages a series of Windows, an associated file tree and
/// OS style.
///@details Desktops drawn on the screen will also have their
/// containing Windows drawn and managed on the screen. In 
/// addition, each Desktop has its own unique FileTree and
/// OS style.
///@author Nader Sleem
///@todo Deal with minimization.
///////////////////////////////////////////////////////////////////////
	class Desktop : public sf::Drawable {
		friend class ppc::World;

///////////////////////////////////////////////////////////////////////
//PUBLIC FIELDS
///////////////////////////////////////////////////////////////////////
	public:

///////////////////////////////////////////////////////////////////////
// CTORs & DTOR
///////////////////////////////////////////////////////////////////////
		
///////////////////////////////////////////////////////////////////////
///@brief Default Desktop Ctor
///////////////////////////////////////////////////////////////////////
		Desktop();

///////////////////////////////////////////////////////////////////////
///@brief Desktop Constructor.
///@details Creates a Desktop with a given FileTree and width and 
/// height for the size of the desktopWindow_, which holds the icons &
/// buttons for the Desktop. The Ctor also intitalizes the
/// Input Handle for the Desktop. 
///@param bkgndWin The Window representing the Window for the Desktop
/// background, which can hold icons/entities.
///@param n The NodeState object to be associated with the Desktop.
///@todo Add param for OSStyle?.
///////////////////////////////////////////////////////////////////////
		Desktop(WindowInterface* bkgndWin, NodeState n);

		
///////////////////////////////////////////////////////////////////////
///@brief Copy Ctor
///////////////////////////////////////////////////////////////////////
		Desktop(const Desktop& other);

///////////////////////////////////////////////////////////////////////
///@brief The   Dtor
///////////////////////////////////////////////////////////////////////
		  ~Desktop();

///////////////////////////////////////////////////////////////////////
///@brief Adds a new Window to the Desktop.
///@details When a new Window is added to the Desktop, it is 
/// automatically focused on.
///@param wi A WindowInterface* which points to the Window to be added.
/// If the pointer is nullptr, nothing happens.
///@post Desktop contains 1 more Window.
///////////////////////////////////////////////////////////////////////
		  void addWindow(WindowInterface*);


///////////////////////////////////////////////////////////////////////
///@brief Brings the desired Window into focus.
///@details To be called when a specificed Window should be 
/// drawn above all others. The Window is then moved to the
/// front of the Window container, ahead of all other Windows,
/// but the ordering of the remaining Windows is kept.
/// @param wi A WindowInterface* which points to the Window that
/// is to be focused on.
///@return Returns True if the Window successfuly focused. Returns
/// False if the argument was nullptr, the Desktop's Window, or if
/// the argument is not a Window in the Desktop.
///////////////////////////////////////////////////////////////////////
        bool focusWindow(WindowInterface*);

        bool isWindow(WindowInterface*);

		//for testing purposes sorry no doc atm
		WindowInterface* getFocusedWindow() { return focused_; };

///////////////////////////////////////////////////////////////////////
///@brief Removes a Window from the Desktop.
///@details After a window is closed, the desktopWindow is the new 
/// focused.
///@param wi  A WindowInterface* which points to the Window to be 
/// deleted. If the pointer is nullptr, nothing happens.
///@post Desktop contains 1 less Window.
///////////////////////////////////////////////////////////////////////
		  void destroyWindow(WindowInterface*);

///////////////////////////////////////////////////////////////////////
///@brief Add the background Window for the Desktop
///////////////////////////////////////////////////////////////////////
		  void addBkgndWindow(WindowInterface*);

///////////////////////////////////////////////////////////////////////
///@brief Sets the icon spritesheet to the Desktop.
///@param sheet The spritesheet containing the icons for the Desktop.
///////////////////////////////////////////////////////////////////////
		  void setIconSheet(sf::Image sheet);

///////////////////////////////////////////////////////////////////////
///@brief Gets the icon spritesheet to the Desktop.
///////////////////////////////////////////////////////////////////////
		  sf::Image& getIconSheet();

///////////////////////////////////////////////////////////////////////
///@brief Sets the icon spritesheet to the Desktop.
///@param sheet The spritesheet containing the icons for the Desktop.
///////////////////////////////////////////////////////////////////////
		  void setButtonSheet(sf::Image sheet);

///////////////////////////////////////////////////////////////////////
///@brief Gets the icon spritesheet to the Desktop.
///////////////////////////////////////////////////////////////////////
		  sf::Image& getButtonSheet();

///////////////////////////////////////////////////////////////////////
///@brief Returns the NodeState in the Desktop.
///@return The NodeState in the Desktop
///////////////////////////////////////////////////////////////////////
		  NodeState* getNodeState();

		  std::vector<Network*> getSolVec();

		  std::vector<Network*> getPlayVec();

		  int getNetVecIndex();

		  unsigned int getNetVecSize() { return solVec_.size();  }

		  void incrementNetVecIndex();

///////////////////////////////////////////////////////////////////////
///@brief Sets the NodeState of the Desktop.
///////////////////////////////////////////////////////////////////////
		  void setNodeState(NodeState);

///////////////////////////////////////////////////////////////////////
///@brief Sets the Background of the Desktop's Window
///////////////////////////////////////////////////////////////////////
		  void setBackgrond(sf::Sprite);

///////////////////////////////////////////////////////////////////////
///@brief Returns a reference to the Input Handler of desktop window
///@return A reference to the InputHandler of desktopWindow_
///////////////////////////////////////////////////////////////////////
		  InputHandler& getInputHandler();

///////////////////////////////////////////////////////////////////////
///@brief Returns the pointer to the desktopWindow
///////////////////////////////////////////////////////////////////////
		  WindowInterface* getDesktopWindow();

///////////////////////////////////////////////////////////////////////
///@brief Sets the Inbox for the Desktop.
///////////////////////////////////////////////////////////////////////
		  void setInbox(Inbox);

///////////////////////////////////////////////////////////////////////
///@brief  Returns the Inbox for the Desktop.
///////////////////////////////////////////////////////////////////////
		  Inbox& getInbox();

///////////////////////////////////////////////////////////////////////
///@brief Sets the Front Top
///////////////////////////////////////////////////////////////////////
		  void setFrontTop(WindowInterface*, bool prop = true);

///////////////////////////////////////////////////////////////////////
///@brief Gets the Front Top
///////////////////////////////////////////////////////////////////////
		  WindowInterface* getFrontTop();
///////////////////////////////////////////////////////////////////////
///@brief Deletes the Front Top
///////////////////////////////////////////////////////////////////////
		  void deleteFrontTop();

		  void setInTransition(Transition&);
		  Transition& getInTransition() { return *inTransition_; }

		  void setOutTransition(Transition&);
		  Transition& getOutTransition() { return *outTransition_; }
///////////////////////////////////////////////////////////////////////
///@brief Reacts to Input for the focused Window.
///////////////////////////////////////////////////////////////////////
		  void registerInput(Event ev);

		  void registerInputFocused(Event ev);
///////////////////////////////////////////////////////////////////////
///@brief Updates all Windows and all objects in the Windows.
///@param deltaTime The time the object needs to catch up with.
///////////////////////////////////////////////////////////////////////
		  void update(sf::Time&);

///////////////////////////////////////////////////////////////////////
///@brief Refreshes all Windows of the Desktop, so they are ready
/// to be drawn again.
///@param states Used to manipulate draw.
///////////////////////////////////////////////////////////////////////
		  void refresh(sf::RenderStates states = sf::RenderStates());
		
		  friend std::ifstream& operator>>(std::ifstream& in, Desktop& desktop);


///////////////////////////////////////////////////////////////////////
// PRIVATE FIELDS
///////////////////////////////////////////////////////////////////////
	private:

		sf::Image iconSheet_;
		sf::Image buttonSheet_;

		NodeState nodeState_;

		ppc::Inbox inbox_;

		sf::Sprite background_;
		sf::Texture backgndTexture_;

		std::vector<ppc::Network*> solVec_;
		std::vector<ppc::Network*> playVec_;
		int netVecIndex_;

		WindowInterface* desktopWindow_;

		WindowInterface* frontTop_;
		WindowInterface* nextFrontTop_;

		WindowInterface* focused_;

		std::vector<WindowInterface*> windows_;

		Transition* inTransition_;
		Transition* outTransition_;


		///////////////////////////////////////////////////////////////////////
		///@brief Draws the Desktop & all its Windows.
		///////////////////////////////////////////////////////////////////////
		void draw(sf::RenderTarget&, sf::RenderStates) const;

		///////////////////////////////////////////////////////////////////////
		///@brief A helper function that checks if the mouse is within a
		/// window.
		///////////////////////////////////////////////////////////////////////
		bool isMouseCollision(WindowInterface*, sf::Vector2i);

		///////////////////////////////////////////////////////////////////////
		///@brief Clears all the data within a Desktop
		///////////////////////////////////////////////////////////////////////
		void clearDesktop();

	};


	///////////////////////////////////////////////////////////////////////
	///@brief Used by operator>> in World to import Desktops from files.
	///////////////////////////////////////////////////////////////////////
	std::ifstream& operator>>(std::ifstream& in, ppc::Desktop& desktop);

};